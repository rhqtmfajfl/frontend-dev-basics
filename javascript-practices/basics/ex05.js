/*
구문(statement)
1. 자바 실행 단위
2. 구문의 구성 요소
    - 값, 연산자: 표현식
    - 주석 : 구문을 구성해도 실행되지 않는다.
    - 예약어들 : if, const, for, ...
3. 구문의 예
    - 주석 구문 
    - if(1-1==0){} # 조건문  값과 연산자가 있고 표현식(true를 표현) 문법 따르고 있고 {} 블록, if 조건문
    - if ~ else 구문
    - switch 구문
    - for, while, do ~ while, for ~ in

4. 공백: 토큰을 분리

5. 세미콜론:
    - 원칙적으로 구문을 분리한다.  ex) i = 10   세미콜론은 구문을 분리해주는 역할
    - 표현식을 표현식구문으로 만들어서 표현식을 실행하게 한다.   ex) 표현식 => i= 10; 

    // i = 10;  j=20; i; 여기서는 ;콜론으로 구문을 분리하였고 개행을 사용하지 않았다.

6. 개행의 역할


*/
//5: 세미콜론의 역할
// i = 10;  j=20; i;
//var s = "hello world"; console.log(s);  // var s = "hello world";

//개행의 역할 1 : ;(세미콜론을)를 대체한다.
//개행의 역할 2 : 상황에 따라서 토큰을 분리하는 역할을 한다.
//어떨때 1 or 2? : 상황에 따라서 자바스크립트 엔진이 에러 없는 실행을 우선 원칙으로 1번과 2번을 판단해 낸다.
// 1번과 2번을 판단해 낸다.

i = 10;

//1)예
var s = "hello world";
console.log(s)

//2) 예
a
=
2
+
2;// 여기서 ;을 써도 되고 안써도 가능


//con;
//sole.log(s)

// 이게 되는 이유는 하나씩 옆으로 붙여 주는 것이 아니라
// 

//my19 // 키워드나 연산식을 만나기 전까지

// 10101010 d   //토큰이 두개로 하나는 숫자라는 리터럴 하나는 변수 d 리터럴 뒤에 변수가 나오면 에러가 된다.

// 

console.log(i);

//여기서 부터는 ; 을 꼭 붙여서 쓴다.
o = {

};

f = function() {

};

//여기는 ;을 붙이는것이 아니다.
if(i==10) {

};  //여기서는 표현식이 아니기 때문에 ; 을 붙이는 것이 안좋다..   ; 은 if문이 끝나고 

;